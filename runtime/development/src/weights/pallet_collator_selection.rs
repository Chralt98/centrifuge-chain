//! Autogenerated weights for pallet_collator_selection
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("development"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=development
// --steps=50
// --repeat=20
// --pallet=pallet-collator-selection
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./scripts/frame-weight-template.hbs
// --output=runtime/development/src/weights/pallet_collator_selection.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_collator_selection.
pub trait WeightInfo {
	fn set_invulnerables(b: u32) -> Weight;
	fn set_desired_candidates() -> Weight;
	fn set_candidacy_bond() -> Weight;
	fn register_as_candidate(c: u32) -> Weight;
	fn leave_intent(c: u32) -> Weight;
	fn note_author() -> Weight;
	fn new_session(r: u32, c: u32) -> Weight;
}

/// Weights for pallet_collator_selection using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn set_invulnerables(b: u32) -> Weight {
		Weight::from_ref_time(20_759_288) // Standard Error: 11_948
			.saturating_add(Weight::from_ref_time(2_665_827).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	fn set_desired_candidates() -> Weight {
		Weight::from_ref_time(12_000_000).saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	fn set_candidacy_bond() -> Weight {
		Weight::from_ref_time(12_000_000).saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	fn register_as_candidate(c: u32) -> Weight {
		Weight::from_ref_time(35_698_311) // Standard Error: 1_268
			.saturating_add(Weight::from_ref_time(115_838).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}

	fn leave_intent(c: u32) -> Weight {
		Weight::from_ref_time(34_408_532) // Standard Error: 1_542
			.saturating_add(Weight::from_ref_time(103_055).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}

	fn note_author() -> Weight {
		Weight::from_ref_time(33_000_000)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}

	fn new_session(_r: u32, c: u32) -> Weight {
		Weight::from_ref_time(16_000_000) // Standard Error: 658_393
			.saturating_add(Weight::from_ref_time(22_751_816).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(c as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(c as u64)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn set_invulnerables(b: u32) -> Weight {
		Weight::from_ref_time(20_759_288) // Standard Error: 11_948
			.saturating_add(Weight::from_ref_time(2_665_827).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(b as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}

	fn set_desired_candidates() -> Weight {
		Weight::from_ref_time(12_000_000).saturating_add(RocksDbWeight::get().writes(1 as u64))
	}

	fn set_candidacy_bond() -> Weight {
		Weight::from_ref_time(12_000_000).saturating_add(RocksDbWeight::get().writes(1 as u64))
	}

	fn register_as_candidate(c: u32) -> Weight {
		Weight::from_ref_time(35_698_311) // Standard Error: 1_268
			.saturating_add(Weight::from_ref_time(115_838).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}

	fn leave_intent(c: u32) -> Weight {
		Weight::from_ref_time(34_408_532) // Standard Error: 1_542
			.saturating_add(Weight::from_ref_time(103_055).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}

	fn note_author() -> Weight {
		Weight::from_ref_time(33_000_000)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}

	fn new_session(_r: u32, c: u32) -> Weight {
		Weight::from_ref_time(16_000_000) // Standard Error: 658_393
			.saturating_add(Weight::from_ref_time(22_751_816).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(c as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(c as u64)))
	}
}
